[tool.poetry]
name = "encapsia-cli"
version = "0.6.0"
description = "Client CLI for talking to an Encapsia system."
readme = "README.md"
authors = ["Timothy Corbett-Clark <timothy.corbettclark@gmail.com>"]
maintainers = ["Petre Mierlu»õiu <pmierlutiu@cmedtechnology.com>"]
license = "MIT"
keywords = ["encapsia", "eSource", "EDC", "Clinical Trials"]
homepage = "https://github.com/Encapsia/encapsia-cli"

[tool.poetry.scripts]
encapsia = "encapsia_cli.encapsia:encapsia"

[tool.poetry.dependencies]
python = "^3.8"
boto3 = "^1.26.142"
click = "^8.1.3"
encapsia-api = "^0.4.2"
# encapsia-api = {path = "../encapsia-api/"} # Only needed during development against unreleased versions of encapsia-api
requests = {version = "^2.31.0", extras = ["security", "socks"]}
semver = "^3.0.0"
shellingham = "^1.5.0.post1"
tabulate = "^0.9.0"
toml = "^0.10.2"
http-prompt = {version = "^2.1.0", optional = true}
httpie = {version = "^3.2.2", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
black = "^23.3.0"
ansi2html = "^1.8.0"
ruff = "^0.0.270"
types-tabulate = "^0.9.0.2"
types-requests = "^2.31.0.0"
types-toml = "^0.10.8.6"
types-click = "^7.1.8"
mypy = "^1.3.0"
types-boto3 = "^1.0.2"
types-botocore = "^1.0.2"

[tool.poetry.extras]
httpie-shell = ["httpie", "http-prompt"]

[build-system]
requires = ["poetry>=1.0.5"]
build-backend = "poetry.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra"
testpaths = [
    "tests",
]

[tool.black]
line-length = 88
target_version = ['py38']

[tool.ruff]
select = [
    "E", "F", "I", "W", "RET", "SIM", "UP", "S", "B", "A", "COM",
    "C90", "C4", "G", "ERA", "PLC",
    # pylint (PL)
    "PLE", "PLR", "PLW",
    # ruff specific rules
    "RUF",
]

ignore = [
    # trailing comma missing
    "COM812",
    # use of assert detected
    "S101",
    # Unnecessary `else` after `return` statement
    "RET505",
    # Argument is shadowing a python buildin. This is actually pretty bad,
    # but since we already have this historically happening, we would break
    # compatibility with clients.
    "A002",
    # Class attribute is shadowing a python builtin
    "A003",
    # Too many arguments in function call. Again, we don't want to break clients.
    "PLR0913",
    # Magic value used in comparison, consider replacing 200 with a constant variable.
    # We use lots of HTTP status codes, would not make sense to replace them.
    "PLR2004",
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W",
    "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "EXE", "FBT",
    "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI",
    "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pycache__",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    # walkthrough tests contain some dummy python
    "walkthrough_tests"
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.8.
target-version = "py38"

[tool.ruff.per-file-ignores]
# many pylint suggestions are improper for tests
"tests/*" = ["PLR", "PLW", "PLC1901"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
lines-after-imports = 2

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "shellingham",
]
ignore_missing_imports = true
